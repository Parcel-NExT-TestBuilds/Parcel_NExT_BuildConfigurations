<local:BaseWindow x:Class="Parcel.Neo.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit" 
        xmlns:local="clr-namespace:Parcel.Neo"
        xmlns:nodify="clr-namespace:Nodify;assembly=Nodify"
        xmlns:viewModels="clr-namespace:Parcel.Neo.Base.Framework.ViewModels;assembly=Parcel.Neo.Base"
        xmlns:baseNodes="clr-namespace:Parcel.Neo.Base.Framework.ViewModels.BaseNodes;assembly=Parcel.Neo.Base"
        xmlns:primitives="clr-namespace:Parcel.Neo.Base.Framework.ViewModels.Primitives;assembly=Parcel.Neo.Base"
        xmlns:converters="clr-namespace:Parcel.Neo.Converters"
        xmlns:viewModel="clr-namespace:Parcel.Neo.ViewModels"
        xmlns:System="clr-namespace:System;assembly=System.Runtime"
        xmlns:dataTypes="clr-namespace:Parcel.Neo.Base.DataTypes;assembly=Parcel.Neo.Base"
        xmlns:advanced="clr-namespace:Parcel.Neo.Base.Framework.Advanced;assembly=Parcel.Neo.Base"
        xmlns:specialNodes="clr-namespace:Parcel.Neo.Base.Toolboxes.Basic.Nodes;assembly=Parcel.Neo.base"
        mc:Ignorable="d"
        Title="{Binding DynamicTitle}" Height="700" Width="1024"
        Background="#1E1E1E"
        DataContext="{Binding RelativeSource={RelativeSource self}}"
        PreviewKeyDown="MainWindow_OnPreviewKeyDown">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Styling/ScrollbarResource.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <!--Data Converters-->
            <converters:NodeBackgroundColorConverter x:Key="NodeBackgroundColorConverter" />
            <converters:FlowToDirectionConverter x:Key="FlowToDirectionConverter" />
            <converters:MediaColorToParcelColorConverter x:Key="MediaColorToParcelColorConverter" />
            <converters:HiddenVisibilityConverter x:Key="HiddenVisibilityConverter" />
            <converters:NodeMessageTypeToBrushColorConverter x:Key="NodeMessageTypeToBrushColorConverter" />
            <converters:NodeLocationConverter x:Key="NodeLocationConverter" />
            <converters:SizeToVector2DConverter x:Key="SizeToVector2DConverter" />
            <converters:GraphInputOutputComboDataTypeNameToTypeConverter x:Key="GraphInputOutputComboDataTypeNameToTypeConverter"/>
            <ObjectDataProvider x:Key="DictionaryEntryTypeEntriesFromEnum" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="dataTypes:DictionaryEntryType"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <!--Grid Background Brushes-->
            <DrawingBrush x:Key="SmallGridLinesDrawingBrush"
              TileMode="Tile"
              ViewportUnits="Absolute"
              Viewport="0 0 15 15"
              Transform="{Binding ViewportTransform, ElementName=Editor}">
                <DrawingBrush.Drawing>
                    <GeometryDrawing Geometry="M0,0 L0,1 0.03,1 0.03,0.03 1,0.03 1,0 Z"
                         Brush="#333337" />
                </DrawingBrush.Drawing>
            </DrawingBrush>
            <DrawingBrush x:Key="LargeGridLinesDrawingBrush"
              TileMode="Tile"
              ViewportUnits="Absolute"
              Opacity="0.5"
              Viewport="0 0 150 150"
              Transform="{Binding ViewportTransform, ElementName=Editor}">
                <DrawingBrush.Drawing>
                    <GeometryDrawing Geometry="M0,0 L0,1 0.015,1 0.015,0.015 1,0.015 1,0 Z"
                         Brush="#515157" />
                </DrawingBrush.Drawing>
            </DrawingBrush>
            <Rectangle x:Key="PlusIcon"
           x:Shared="False"
           Width="16"
           Height="16">
                <Rectangle.Fill>
                    <DrawingBrush>
                        <DrawingBrush.Drawing>
                            <DrawingGroup>
                                <DrawingGroup.Children>
                                    <GeometryDrawing Brush="#00FFFFFF"
                                         Geometry="F1M16,16L0,16 0,0 16,0z" />
                                    <GeometryDrawing Brush="#FFF6F6F6"
                                         Geometry="F1M6.0003,-0.000199999999999534L6.0003,5.9998 0.000300000000000189,5.9998 0.000300000000000189,9.9998 6.0003,9.9998 6.0003,15.9998 10.0003,15.9998 10.0003,9.9998 16.0003,9.9998 16.0003,5.9998 10.0003,5.9998 10.0003,-0.000199999999999534z" />
                                    <GeometryDrawing Brush="#FF424242"
                                         Geometry="F1M15,9L9,9 9,15 7,15 7,9 1,9 1,7 7,7 7,1 9,1 9,7 15,7z" />
                                </DrawingGroup.Children>
                            </DrawingGroup>
                        </DrawingBrush.Drawing>
                    </DrawingBrush>
                </Rectangle.Fill>
            </Rectangle>
            <Rectangle x:Key="RemoveKeyIcon" x:Shared="False" Width="16" Height="16">
                <Rectangle.Fill>
                    <DrawingBrush>
                        <DrawingBrush.Drawing>
                            <DrawingGroup>
                                <DrawingGroup.Children>
                                    <GeometryDrawing Brush="#00FFFFFF"
                                         Geometry="F1M16,16L0,16 0,0 16,0z" />
                                    <GeometryDrawing Brush="#FFF6F6F6"
                                         Geometry="F1M13,10L4,10 4,6 13,6z" />
                                    <GeometryDrawing Brush="#FF414141"
                                         Geometry="F1M12,9L5,9 5,7 12,7z" />
                                </DrawingGroup.Children>
                            </DrawingGroup>
                        </DrawingBrush.Drawing>
                    </DrawingBrush>
                </Rectangle.Fill>
            </Rectangle>

            <!--Connector Shapes-->
            <SolidColorBrush x:Key="RedSquareConnectorColor" Color="OrangeRed"></SolidColorBrush>
            <SolidColorBrush x:Key="SquareConnectorColor" Color="MediumSlateBlue"></SolidColorBrush>
            <SolidColorBrush x:Key="TriangleConnectorColor" Color="MediumVioletRed"></SolidColorBrush>
            <ControlTemplate x:Key="SquareConnector" TargetType="Control">
                <Rectangle Width="14"
               Height="14"
               StrokeDashCap="Round"
               StrokeLineJoin="Round"
               StrokeStartLineCap="Round"
               StrokeEndLineCap="Round"
               Stroke="{TemplateBinding BorderBrush}"
               Fill="{TemplateBinding Background}"
               StrokeThickness="2" />
            </ControlTemplate>
            <ControlTemplate x:Key="TriangleConnector" TargetType="Control">
                <Polygon Width="14"
             Height="14"
             Points="1,13 13,13 7,1"
             StrokeDashCap="Round"
             StrokeLineJoin="Round"
             StrokeStartLineCap="Round"
             StrokeEndLineCap="Round"
             Stroke="{TemplateBinding BorderBrush}"
             Fill="{TemplateBinding Background}"
             StrokeThickness="2" />
            </ControlTemplate>
            <Style x:Key="ConnectionStyle" TargetType="{x:Type nodify:BaseConnection}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Input.Shape}" 
                     Value="{x:Static dataTypes:ConnectorShape.Square}">
                        <Setter Property="Stroke" Value="{StaticResource SquareConnectorColor}"></Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Input.Shape}" 
                     Value="{x:Static dataTypes:ConnectorShape.RedSquare}">
                        <Setter Property="Stroke" Value="{StaticResource RedSquareConnectorColor}"></Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Input.Shape}" 
                     Value="{x:Static dataTypes:ConnectorShape.Triangle}">
                        <Setter Property="Stroke" Value="{StaticResource TriangleConnectorColor}"></Setter>
                    </DataTrigger>
                </Style.Triggers>
                <!-- <Setter Property="Stroke" Value="{DynamicResource Connection.StrokeBrush}"></Setter> -->
                <Setter Property="Cursor" Value="Hand"></Setter>
                <Setter Property="ToolTip" Value="Double click to split"></Setter>
            </Style>
            <Style TargetType="{x:Type nodify:NodeInput}"
       BasedOn="{StaticResource {x:Type nodify:NodeInput}}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Shape}" 
                     Value="{x:Static dataTypes:ConnectorShape.Square}">
                        <Setter Property="ConnectorTemplate" Value="{StaticResource SquareConnector}" />
                        <Setter Property="BorderBrush" Value="{StaticResource SquareConnectorColor}"></Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Shape}" 
                     Value="{x:Static dataTypes:ConnectorShape.RedSquare}">
                        <Setter Property="ConnectorTemplate" Value="{StaticResource SquareConnector}" />
                        <Setter Property="BorderBrush" Value="{StaticResource RedSquareConnectorColor}"></Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Shape}" 
                     Value="{x:Static dataTypes:ConnectorShape.Triangle}">
                        <Setter Property="ConnectorTemplate" Value="{StaticResource TriangleConnector}" />
                        <Setter Property="BorderBrush" Value="{StaticResource TriangleConnectorColor}"></Setter>
                    </DataTrigger>
                </Style.Triggers>
                <Setter Property="Header"
            Value="{Binding Title}" />
                <Setter Property="Anchor"
            Value="{Binding Anchor, Mode=OneWayToSource, Converter={StaticResource NodeLocationConverter}}" />
                <Setter Property="IsConnected"
            Value="{Binding IsConnected}" />
                <Setter Property="Visibility"
            Value="{Binding IsHidden, Converter={StaticResource HiddenVisibilityConverter}}"></Setter>
            </Style>
            <Style TargetType="{x:Type nodify:NodeOutput}"
       BasedOn="{StaticResource {x:Type nodify:NodeOutput}}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Shape}" 
                     Value="{x:Static dataTypes:ConnectorShape.Square}">
                        <Setter Property="ConnectorTemplate" Value="{StaticResource SquareConnector}" />
                        <Setter Property="BorderBrush" Value="{StaticResource SquareConnectorColor}"></Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Shape}" 
                     Value="{x:Static dataTypes:ConnectorShape.RedSquare}">
                        <Setter Property="ConnectorTemplate" Value="{StaticResource SquareConnector}" />
                        <Setter Property="BorderBrush" Value="{StaticResource RedSquareConnectorColor}"></Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Shape}" 
                     Value="{x:Static dataTypes:ConnectorShape.Triangle}">
                        <Setter Property="ConnectorTemplate" Value="{StaticResource TriangleConnector}" />
                        <Setter Property="BorderBrush" Value="{StaticResource TriangleConnectorColor}"></Setter>
                    </DataTrigger>
                </Style.Triggers>
                <Setter Property="Header"
            Value="{Binding Title}" />
                <Setter Property="Anchor"
            Value="{Binding Anchor, Mode=OneWayToSource, Converter={StaticResource NodeLocationConverter}}" />
                <Setter Property="IsConnected"
            Value="{Binding IsConnected}" />
                <Setter Property="Visibility"
            Value="{Binding IsHidden, Converter={StaticResource HiddenVisibilityConverter}}"></Setter>
            </Style>

            <!--Custom Styling-->
            <Style TargetType="{x:Type Button}">
                <Setter Property="Background" Value="DimGray"/>
                <Setter Property="BorderBrush" Value="LightBlue"/>
                <Setter Property="Margin" Value="1"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="DarkGoldenrod"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--Data Templates-->
            <DataTemplate x:Key="PrimitiveNodeInputConnectorTemplate" DataType="{x:Type viewModels:BaseConnector}">
                <ContentPresenter Content="{Binding }">
                    <ContentPresenter.Resources>
                        <DataTemplate DataType="{x:Type viewModels:PrimitiveBooleanInputConnector}">
                            <nodify:NodeInput>
                                <nodify:NodeInput.HeaderTemplate>
                                    <DataTemplate DataType="{x:Type viewModels:PrimitiveBooleanInputConnector}">
                                        <StackPanel Orientation="Horizontal" DataContext="{Binding Path=DataContext, 
                                            RelativeSource={RelativeSource AncestorType={x:Type nodify:NodeInput},Mode=FindAncestor}}">
                                            <TextBlock Text="{Binding Title}"
                                           Margin="0 0 5 0" />
                                            <CheckBox IsChecked="{Binding Value}"
                                          Visibility="{Binding IsConnected, Converter={converters:BooleanToVisibilityConverter Negate=True}}" />
                                        </StackPanel>
                                    </DataTemplate>
                                </nodify:NodeInput.HeaderTemplate>
                            </nodify:NodeInput>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type viewModels:PrimitiveStringInputConnector}">
                            <nodify:NodeInput>
                                <nodify:NodeInput.HeaderTemplate>
                                    <DataTemplate DataType="{x:Type viewModels:PrimitiveStringInputConnector}">
                                        <StackPanel Orientation="Horizontal" DataContext="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type nodify:NodeInput},Mode=FindAncestor}}">
                                            <TextBlock Text="{Binding Title}"
                                           Margin="0 0 5 0" />
                                            <TextBox Text="{Binding Value}" MinWidth="64" MaxWidth="250"
                                         PreviewKeyDown="PrimitiveInputTextbox_OnPreviewKeyDown_CommandOverride"
                                         Visibility="{Binding IsConnected, Converter={converters:BooleanToVisibilityConverter Negate=True}}" />
                                        </StackPanel>
                                    </DataTemplate>
                                </nodify:NodeInput.HeaderTemplate>
                            </nodify:NodeInput>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type viewModels:PrimitiveCharInputConnector}">
                            <nodify:NodeInput>
                                <nodify:NodeInput.HeaderTemplate>
                                    <DataTemplate DataType="{x:Type viewModels:PrimitiveCharInputConnector}">
                                        <StackPanel Orientation="Horizontal" DataContext="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type nodify:NodeInput},Mode=FindAncestor}}">
                                            <TextBlock Text="{Binding Title}" Margin="0 0 5 0" />
                                            <TextBox Text="{Binding Value}" MinWidth="64" MaxWidth="250" PreviewKeyDown="PrimitiveInputTextbox_OnPreviewKeyDown_CommandOverride" Visibility="{Binding IsConnected, Converter={converters:BooleanToVisibilityConverter Negate=True}}" />
                                        </StackPanel>
                                    </DataTemplate>
                                </nodify:NodeInput.HeaderTemplate>
                            </nodify:NodeInput>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type viewModels:PrimitiveDateTimeInputConnector}">
                            <nodify:NodeInput>
                                <nodify:NodeInput.HeaderTemplate>
                                    <DataTemplate DataType="{x:Type viewModels:PrimitiveDateTimeInputConnector}">
                                        <StackPanel Orientation="Horizontal" DataContext="{Binding Path=DataContext, 
                                    RelativeSource={RelativeSource AncestorType={x:Type nodify:NodeInput},Mode=FindAncestor}}">
                                            <TextBlock Text="{Binding Title}" Margin="0 0 5 0" />
                                            <xctk:DateTimePicker  Text="{Binding Value}" Format="Custom" FormatString="yyyy-MM-dd HH:mm:ss" MinWidth="25" Visibility="{Binding IsConnected, Converter={converters:BooleanToVisibilityConverter Negate=True}}"/>
                                        </StackPanel>
                                    </DataTemplate>
                                </nodify:NodeInput.HeaderTemplate>
                            </nodify:NodeInput>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type viewModels:PrimitiveColorInputConnector}">
                            <nodify:NodeInput>
                                <nodify:NodeInput.HeaderTemplate>
                                    <DataTemplate DataType="{x:Type viewModels:PrimitiveColorInputConnector}">
                                        <StackPanel Orientation="Horizontal" DataContext="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type nodify:NodeInput},Mode=FindAncestor}}">
                                            <TextBlock Text="{Binding Title}" Margin="0 0 5 0" />
                                            <xctk:ColorPicker SelectedColor="{Binding Value, Converter={StaticResource MediaColorToParcelColorConverter}}" MinWidth="25" Visibility="{Binding IsConnected, Converter={converters:BooleanToVisibilityConverter Negate=True}}"/>
                                        </StackPanel>
                                    </DataTemplate>
                                </nodify:NodeInput.HeaderTemplate>
                            </nodify:NodeInput>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type viewModels:PrimitiveVector2InputConnector}">
                            <nodify:NodeInput>
                                <nodify:NodeInput.HeaderTemplate>
                                    <DataTemplate DataType="{x:Type viewModels:PrimitiveVector2InputConnector}">
                                        <StackPanel Orientation="Horizontal" DataContext="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type nodify:NodeInput},Mode=FindAncestor}}">
                                            <StackPanel.Resources>
                                                <Style TargetType="Label">
                                                    <Setter Property="Foreground" Value="White"/>
                                                    <Setter Property="FontSize" Value="12"/>
                                                    <Setter Property="Margin" Value="0"/>
                                                    <Setter Property="Padding" Value="0"/>
                                                    <Setter Property="VerticalAlignment" Value="Center"/>
                                                </Style>
                                            </StackPanel.Resources>
                                            <TextBlock Text="{Binding Title}" Margin="0 0 5 0" />
                                            <Label Content="(X: "/>
                                            <TextBox Text="{Binding ValueX}" MinWidth="25" PreviewKeyDown="PrimitiveInputTextbox_OnPreviewKeyDown_CommandOverride" Visibility="{Binding IsConnected, Converter={converters:BooleanToVisibilityConverter Negate=True}}" />
                                            <Label Content="Y: "/>
                                            <TextBox Text="{Binding ValueY}" MinWidth="25" PreviewKeyDown="PrimitiveInputTextbox_OnPreviewKeyDown_CommandOverride" Visibility="{Binding IsConnected, Converter={converters:BooleanToVisibilityConverter Negate=True}}" />
                                            <Label Content=")"/>
                                        </StackPanel>
                                    </DataTemplate>
                                </nodify:NodeInput.HeaderTemplate>
                            </nodify:NodeInput>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type viewModels:PrimitiveSizeInputConnector}">
                            <nodify:NodeInput>
                                <nodify:NodeInput.HeaderTemplate>
                                    <DataTemplate DataType="{x:Type viewModels:PrimitiveSizeInputConnector}">
                                        <StackPanel Orientation="Horizontal" DataContext="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type nodify:NodeInput},Mode=FindAncestor}}">
                                            <StackPanel.Resources>
                                                <Style TargetType="Label">
                                                    <Setter Property="Foreground" Value="White"/>
                                                    <Setter Property="FontSize" Value="12"/>
                                                    <Setter Property="Margin" Value="0"/>
                                                    <Setter Property="Padding" Value="0"/>
                                                    <Setter Property="VerticalAlignment" Value="Center"/>
                                                </Style>
                                            </StackPanel.Resources>
                                            <TextBlock Text="{Binding Title}" Margin="0 0 5 0" />
                                            <Label Content="("/>
                                            <TextBox Text="{Binding Width}" MinWidth="25" PreviewKeyDown="PrimitiveInputTextbox_OnPreviewKeyDown_CommandOverride" Visibility="{Binding IsConnected, Converter={converters:BooleanToVisibilityConverter Negate=True}}" />
                                            <Label Content="x"/>
                                            <TextBox Text="{Binding Height}" MinWidth="25" PreviewKeyDown="PrimitiveInputTextbox_OnPreviewKeyDown_CommandOverride" Visibility="{Binding IsConnected, Converter={converters:BooleanToVisibilityConverter Negate=True}}" />
                                            <Label Content=")"/>
                                        </StackPanel>
                                    </DataTemplate>
                                </nodify:NodeInput.HeaderTemplate>
                            </nodify:NodeInput>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type viewModels:PrimitiveEnumInputConnector}">
                            <nodify:NodeInput>
                                <nodify:NodeInput.HeaderTemplate>
                                    <DataTemplate DataType="{x:Type viewModels:PrimitiveEnumInputConnector}">
                                        <StackPanel Orientation="Horizontal" DataContext="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type nodify:NodeInput},Mode=FindAncestor}}">
                                            <TextBlock Text="{Binding Title}" Margin="0 0 5 0" />
                                            <ComboBox ItemsSource="{Binding Options}" SelectedValue="{Binding DisplayValue}" MinWidth="25" Visibility="{Binding IsConnected, Converter={converters:BooleanToVisibilityConverter Negate=True}}"/>
                                        </StackPanel>
                                    </DataTemplate>
                                </nodify:NodeInput.HeaderTemplate>
                            </nodify:NodeInput>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type viewModels:PrimitiveActionInputConnector}">
                            <nodify:NodeInput>
                                <nodify:NodeInput.HeaderTemplate>
                                    <DataTemplate DataType="{x:Type viewModels:PrimitiveActionInputConnector}">
                                        <DataTemplate.Resources>
                                            <Style TargetType="Label">
                                                <Setter Property="Foreground" Value="White"/>
                                                <Setter Property="FontSize" Value="12"/>
                                                <Setter Property="Margin" Value="0"/>
                                                <Setter Property="Padding" Value="0"/>
                                                <Setter Property="VerticalAlignment" Value="Center"/>
                                            </Style>
                                        </DataTemplate.Resources>
                                        <Button MinWidth="60" MinHeight="25" BorderBrush="#3378b4" Margin="0" Padding="0" Click="PrimitiveActionInputButton_Click" DataContext="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type nodify:NodeInput},Mode=FindAncestor}}">
                                            <Button.Resources>
                                                <Style TargetType="Border">
                                                    <Setter Property="CornerRadius" Value="3"/>
                                                    <Setter Property="BorderThickness" Value="2"/>
                                                </Style>
                                            </Button.Resources>
                                            <Button.Background>
                                                <LinearGradientBrush StartPoint="0 0" EndPoint="0 1">
                                                    <LinearGradientBrush.GradientStops>
                                                        <GradientStop Offset="0.1" Color="#2e5f8b" />
                                                        <GradientStop Offset="1" Color="#074b86" />
                                                    </LinearGradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </Button.Background>
                                            <Label Content="{Binding Title}" Margin="0 0 5 0" HorizontalAlignment="Center"/>
                                        </Button>
                                    </DataTemplate>
                                </nodify:NodeInput.HeaderTemplate>
                            </nodify:NodeInput>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type viewModels:PrimitiveNumberInputConnector}">
                            <nodify:NodeInput>
                                <nodify:NodeInput.HeaderTemplate>
                                    <DataTemplate DataType="{x:Type viewModels:PrimitiveNumberInputConnector}">
                                        <StackPanel Orientation="Horizontal" DataContext="{Binding Path=DataContext, 
                                            RelativeSource={RelativeSource AncestorType={x:Type nodify:NodeInput},Mode=FindAncestor}}">
                                            <TextBlock Text="{Binding Title}"
                                           Margin="0 0 5 0" />
                                            <TextBox Text="{Binding Value}"
                                         MinWidth="25"
                                         PreviewKeyDown="PrimitiveInputTextbox_OnPreviewKeyDown_CommandOverride"
                                         Visibility="{Binding IsConnected, Converter={converters:BooleanToVisibilityConverter Negate=True}}" />
                                        </StackPanel>
                                    </DataTemplate>
                                </nodify:NodeInput.HeaderTemplate>
                            </nodify:NodeInput>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type viewModels:BaseConnector}">
                            <nodify:NodeInput/>
                        </DataTemplate>
                    </ContentPresenter.Resources>
                </ContentPresenter>
            </DataTemplate>
            <DataTemplate x:Key="PrimitiveNodeOutputConnectorTemplate"  DataType="{x:Type viewModels:BaseConnector}">
                <nodify:NodeOutput/>
            </DataTemplate>
        </ResourceDictionary>
    </Window.Resources>
    <DockPanel LastChildFill="True">
        <Menu DockPanel.Dock="Top">
            <Menu.Resources>
                <ResourceDictionary Source="Styling/NeoMenuStylingDictionary.xaml"/>
            </Menu.Resources>
            <MenuItem Header="Document">
                <MenuItem Header="Open..." Click="OpenCanvasMenuItem_Click"/>
                <MenuItem Header="Save" Click="SaveCanvasMenuItem_Click"/>
                <MenuItem Header="Save As..."  Click="SaveCanvasAsMenuItem_Click"/>
                <Separator Visibility="Collapsed"/>
                <MenuItem Header="Import..." ToolTip="Import and insert a document into current graph." Visibility="Collapsed"/>
                <Separator/>
                <MenuItem Header="Close" ToolTip="Closes the application. At the moment it won't automatically save current document nor display a warning message before quitting."/>
            </MenuItem>
            <MenuItem Header="Node">
                <MenuItem Header="Create Function..." Click="CreateFunctionMenuItem_Click"/>
                <MenuItem Header="Modify Function..." Visibility="Collapsed"/>
                <MenuItem Header="(Batch) Import Functions..." ToolTip="Batch import functions from many script files." Visibility="Collapsed"/>
                <MenuItem Header="Export Functions..." Visibility="Collapsed"/>
            </MenuItem>
            <MenuItem Header="Edit" Visibility="Collapsed">
                <MenuItem Header="Select All (Ctrl+A)"/>
            </MenuItem>
            <MenuItem Header="Document" Visibility="Collapsed">
                <MenuItem Header="Add Graph"/>
                <Separator/>
                <MenuItem Name="GoToGraphMenu" Header="Go to Graph">
                    <MenuItem Header="Default (Main) (F1)"/>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="View">
                <MenuItem Header="Console" Click="ToggleConsoleWindowMenuItem_Click" ToolTip="Toggles showing/hiding console window, which displays output messages from Print commands. Notice closing console window directly also closes the application."/>
                <MenuItem x:Name="ShowNodesPaletteMenuItem" Header="Show Nodes Palette" IsCheckable="True" IsChecked="True" Checked="ShowNodesPaletteMenuItem_Checked" Unchecked="ShowNodesPaletteMenuItem_Unchecked" ToolTip="Toggle showing/hiding Nodes Palette, which allows drag-and-drop creation of nodes."/>
            </MenuItem>
            <MenuItem Header="Package">
                <MenuItem Header="Load.." Click="LoadPackageMenuItem_Click" ToolTip="Load standard packages that come with distribution and not loaded by default."/>
                <Separator/>
                <MenuItem Header="Import" Click="ImportPackageMenuItem_Click" ToolTip="Import from local dll."/>
                <MenuItem Header="Browse" Click="BrowsePackagesMenuItem_Click" ToolTip="Browse available packages (from both NuGet and Zora store). Can also download selected package."/>
                <MenuItem Header="Download" Click="DownloadNamedPackageMenuItem_Click" ToolTip="Download named package directly."/>
                <Separator/>
                <MenuItem Header="Create Package..." Click="CreateScaffoldPackageMenuItem_Click" ToolTip="Create a new package."/>
                <Separator Visibility="Collapsed"/>
                <MenuItem Header="Re-Import" Click="ReimportPackageMenuItem_Click" ToolTip="Re-Import from local dll; Useful during development." Visibility="Collapsed"/>
                <MenuItem Header="Compile &amp; Import" Click="CompileAndReImportPackageMenuItem_Click" ToolTip="(Re-)Import by compiling using dotnet from local package; Useful during development." Visibility="Collapsed"/>
            </MenuItem>
            <MenuItem Header="Help">
                <MenuItem Header="Manual" Visibility="Collapsed"/>
                <MenuItem Header="Shortcuts" Visibility="Collapsed"/>
                <Separator Visibility="Collapsed"/>
                <MenuItem Header="About" Click="AboutMenuItem_Click" ToolTip="Shows the Help window."/>
            </MenuItem>
        </Menu>
        <Grid DockPanel.Dock="Bottom">
            <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="NodesPaletteColumn" Width="2.8*"/>
                    <ColumnDefinition x:Name="NodesPaletteSplitterColumn" Width="3"/>
                    <ColumnDefinition Width="8*"/>
                </Grid.ColumnDefinitions>
                <!-- Nodes Palette -->
                <DockPanel Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" LastChildFill="True" Visibility="Visible">
                    <Border DockPanel.Dock="Top" BorderBrush="DarkSlateGray" BorderThickness="2" Background="#25394b">
                        <DockPanel LastChildFill="True">
                            <Label DockPanel.Dock="Left" Content="Nodes Palette" FontSize="18" Foreground="#468cc9" Margin="0" Padding="4, 2, 0, 2"/>
                            <Label Content="{Binding PaletteToolboxes.Count}" Foreground="DarkGoldenrod" Margin="0" Padding="0"/>
                        </DockPanel>
                    </Border>
                    <Border DockPanel.Dock="Bottom" BorderBrush="DarkSlateGray" BorderThickness="1">
                        <ScrollViewer VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Padding="4,0,0,0" VerticalScrollBarVisibility="Auto">
                            <ItemsControl ItemsSource="{Binding PaletteToolboxes}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate DataType="{x:Type viewModel:NodesPaletteToolboxViewModel}">
                                        <DockPanel LastChildFill="True" MinWidth="150">
                                            <!--Category Header-->
                                            <StackPanel DockPanel.Dock="Top" Orientation="Horizontal" MouseDown="NodePaletteCategoryHeaderLabelStackPanel_MouseDown" HorizontalAlignment="Stretch" Background="Transparent">
                                                <Label Content="▼" Visibility="{Binding Collapsed, Converter={converters:BooleanToVisibilityConverter Negate=True}}" Foreground="White" FontSize="18" Margin="0,0,2,0" Padding="0" VerticalAlignment="Center"/>
                                                <Label Content="⊿" Visibility="{Binding Collapsed, Converter={converters:BooleanToVisibilityConverter}}" Foreground="White" FontSize="18" Margin="0,0,2,0" Padding="0" VerticalAlignment="Center"/>
                                                <Label Content="{Binding ToolboxName}" Foreground="White" FontSize="18"/>
                                            </StackPanel>
                                            <!--Toolbox Nodes-->
                                            <ItemsControl DockPanel.Dock="Bottom" ItemsSource="{Binding Items}" Visibility="{Binding Collapsed, Converter={converters:BooleanToVisibilityConverter Negate=True}}">
                                                <ItemsControl.ItemTemplate>
                                                    <DataTemplate DataType="{x:Type viewModel:NodesPaletteToolboxNodeItemViewModel}">
                                                        <Border BorderThickness="1" BorderBrush="DarkSlateGray" Margin="2" Padding="2" MouseDown="NodePaletteNodeItemBorder_MouseDown" ToolTip="{Binding Definition.Tooltip}">
                                                            <Border.Style>
                                                                <Style>
                                                                    <Style.Triggers>
                                                                        <Trigger Property="Border.IsMouseOver" Value="True">
                                                                            <Setter Property="Border.Background" Value="#2A20B2AA" />
                                                                        </Trigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </Border.Style>
                                                            <StackPanel Orientation="Vertical">
                                                                <!--Preview-->
                                                                <Image Source="{Binding PreviewImage}" MaxWidth="128" MaxHeight="128" Visibility="{Binding PreviewImage, Converter={converters:BooleanToVisibilityConverter}}"/>
                                                                <!--Generated Preview-->
                                                                <!--(Remark) At the moment this is causing significant loading speed downgrade (and gigantic memory cost), though it's a one-time cost.-->
                                                                <Border Margin="6" Padding="2" BorderThickness="3" CornerRadius="2" Visibility="{Binding PreviewImage, Converter={converters:BooleanToVisibilityConverter Negate=True}}">
                                                                    <Border.Style>
                                                                        <Style TargetType="Border" x:Name="OuterBoder">
                                                                            <Setter Property="Background" Value="#416788"/>

                                                                            <Setter Property="BorderBrush" Value="#3073ad"/>

                                                                            <Style.Triggers>
                                                                                <DataTrigger Binding="{Binding IsConstructor}" Value="True">
                                                                                    <Setter Property="Background">
                                                                                        <Setter.Value>
                                                                                            <LinearGradientBrush StartPoint="0 0" EndPoint="0 1">
                                                                                                <LinearGradientBrush.GradientStops>
                                                                                                    <GradientStop Offset="0.1" Color="#9d7e3e" />
                                                                                                    <GradientStop Offset="1" Color="#c1a14a" />
                                                                                                </LinearGradientBrush.GradientStops>
                                                                                            </LinearGradientBrush>
                                                                                        </Setter.Value>
                                                                                    </Setter>
                                                                                    <Setter Property="BorderBrush" Value="#c1a14a"/>
                                                                                </DataTrigger>
                                                                            </Style.Triggers>
                                                                        </Style>
                                                                    </Border.Style>
                                                                    <StackPanel>
                                                                        <Label Content="{Binding DisplayName}" Foreground="#adb4ba" Margin="1" Padding="0" FontWeight="Bold"/>
                                                                        <Separator Margin="1" HorizontalAlignment="Stretch" Foreground="LightGray" Height="2"/>
                                                                        <Border Margin="1" Padding="0">
                                                                            <DockPanel LastChildFill="True">
                                                                                <ItemsControl ItemsSource="{Binding Definition.Descriptor.InputNames}">
                                                                                    <ItemsControl.ItemTemplate>
                                                                                        <DataTemplate DataType="{x:Type System:String}">
                                                                                            <StackPanel Orientation="Horizontal">
                                                                                                <Label Content="○" Foreground="White" Margin="1" Padding="0" VerticalAlignment="Center" FontSize="12"/>
                                                                                                <Label Content="{Binding}" Foreground="White" Margin="1" Padding="0" VerticalAlignment="Center"/>
                                                                                            </StackPanel>
                                                                                        </DataTemplate>
                                                                                    </ItemsControl.ItemTemplate>
                                                                                </ItemsControl>
                                                                                <ItemsControl ItemsSource="{Binding Definition.Descriptor.OutputNames}" HorizontalAlignment="Right">
                                                                                    <ItemsControl.ItemTemplate>
                                                                                        <DataTemplate DataType="{x:Type System:String}">
                                                                                            <StackPanel Orientation="Horizontal">
                                                                                                <Label Content="{Binding}" Foreground="White" Margin="1" Padding="0" VerticalAlignment="Center"/>
                                                                                                <Label Content="○" Foreground="White" Margin="1" Padding="0" VerticalAlignment="Center" FontSize="12"/>
                                                                                            </StackPanel>
                                                                                        </DataTemplate>
                                                                                    </ItemsControl.ItemTemplate>
                                                                                </ItemsControl>
                                                                            </DockPanel>
                                                                        </Border>
                                                                    </StackPanel>
                                                                </Border>
                                                                <!--Label-->
                                                                <Label Content="{Binding DisplayName}" Foreground="LightGoldenrodYellow" HorizontalAlignment="Center" Visibility="{Binding PreviewImage, Converter={converters:BooleanToVisibilityConverter}}"/>
                                                            </StackPanel>
                                                        </Border>
                                                    </DataTemplate>
                                                </ItemsControl.ItemTemplate>
                                            </ItemsControl>
                                        </DockPanel>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </ScrollViewer>
                    </Border>
                </DockPanel>
                <!-- Horizontal Splitter -->
                <GridSplitter Grid.Column="1" Width="3" HorizontalAlignment="Stretch" Visibility="Visible" Background="SlateGray" MouseDoubleClick="NodesPaletteGridSplitter_MouseDoubleClick" ToolTip="Drag to adjust Nodes Palette width. Double-click to hide Nodes Palette."/>
                <!-- Monolithic Node Graph -->
                <Grid Grid.Column="2" Background="{StaticResource LargeGridLinesDrawingBrush}">
                    <nodify:NodifyEditor HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                          x:Name="Editor" DisableAutoPanning="True"
                          Background="{StaticResource SmallGridLinesDrawingBrush}"
                          ItemsSource="{Binding Canvas.Nodes}"
                          Connections="{Binding Canvas.Connections}"
                          PendingConnection="{Binding Canvas.PendingConnection}"
                          SelectedItems="{Binding Canvas.SelectedNodes}"
                          DisconnectConnectorCommand="{Binding Canvas.DisconnectConnectorCommand}"
                          MouseRightButtonUp="Editor_OnMouseRightButtonUp" MouseLeftButtonDown="Editor_OnMouseDoubleClick"
                          AllowDrop="True" Drop="Editor_Drop">
                        <nodify:NodifyEditor.PendingConnectionTemplate>
                            <DataTemplate DataType="{x:Type viewModels:PendingConnection}">
                                <nodify:PendingConnection Source="{Binding Source, Mode=OneWayToSource}"
                       Content="{Binding PreviewText}"
                       Target="{Binding PreviewTarget, Mode=OneWayToSource}"
                       PreviewTarget="{Binding PreviewTarget, Mode=OneWayToSource}"
                       CompletedCommand="{Binding Graph.CreateConnectionCommand}"
                       Direction="{Binding Source.FlowType, Converter={StaticResource FlowToDirectionConverter}}"/>
                            </DataTemplate>
                        </nodify:NodifyEditor.PendingConnectionTemplate>
                        <nodify:NodifyEditor.InputBindings>
                            <KeyBinding Key="Delete" Command="{Binding Canvas.DeleteSelectionCommand}" />
                            <!--<KeyBinding Key="C" Command="{Binding Canvas.CommentSelectionCommand}" />-->
                            <KeyBinding Key="R" Command="{Binding RepeatLastCommand}" />

                            <KeyBinding Key="C" Modifiers="Control" Command="{Binding CreateCalculatorNodeCommand}" />
                            <KeyBinding Key="N" Modifiers="Control" Command="{Binding NewCanvasCommand}" />
                            <KeyBinding Key="O" Modifiers="Control" Command="{Binding OpenCanvasCommand}" />
                            <KeyBinding Key="S" Modifiers="Control" Command="{Binding SaveCanvasCommand}" />

                            <KeyBinding Key="F1" Command="{Binding ShowHelpCommand}" />
                        </nodify:NodifyEditor.InputBindings>
                        <nodify:NodifyEditor.Resources>
                            <!--Custom Styling-->
                            <Style TargetType="{x:Type TextBox}"
BasedOn="{StaticResource {x:Type TextBox}}">
                                <Setter Property="Background" Value="#333337" />
                                <Setter Property="BorderBrush" Value="#3F3F3F" />
                                <Setter Property="Foreground" Value="White" />
                                <Setter Property="BorderThickness" Value="1" />
                                <Setter Property="Padding" Value="2 1" />
                                <Setter Property="Margin" Value="1"></Setter>
                                <Setter Property="VerticalContentAlignment" Value="Center" />
                            </Style>

                            <!--Node Type Data Templates-->
                            <DataTemplate DataType="{x:Type baseNodes:PrimitiveNode}">
                                <nodify:Node Header="{Binding Title}" Content="{Binding}" Input="{Binding Input}" Output="{Binding Output}" InputConnectorTemplate="{StaticResource PrimitiveNodeInputConnectorTemplate}" OutputConnectorTemplate="{StaticResource PrimitiveNodeOutputConnectorTemplate}">
                                    <nodify:Node.Resources>
                                        <DataTemplate DataType="{x:Type baseNodes:PrimitiveNode}">
                                            <TextBox Text="{Binding Value}" MinWidth="100" PreviewKeyDown="PrimitiveInputTextbox_OnPreviewKeyDown_CommandOverride" Margin="5 0 0 0" />
                                        </DataTemplate>
                                        <DataTemplate DataType="{x:Type primitives:OpenFileNode}">
                                            <DockPanel LastChildFill="True">
                                                <Button DockPanel.Dock="Right" Content="Open" Click="OpenFileNode_ButtonClick"></Button>
                                                <TextBox Text="{Binding Path}" MinWidth="100" MaxWidth="180" PreviewKeyDown="PrimitiveInputTextbox_OnPreviewKeyDown_CommandOverride" Margin="5 0 0 0" />
                                            </DockPanel>
                                        </DataTemplate>
                                        <DataTemplate DataType="{x:Type primitives:SaveFileNode}">
                                            <DockPanel LastChildFill="True">
                                                <Button DockPanel.Dock="Right" Content="Open" Click="SaveFileNode_ButtonClick"></Button>
                                                <TextBox Text="{Binding Path}" MinWidth="100" MaxWidth="180" PreviewKeyDown="PrimitiveInputTextbox_OnPreviewKeyDown_CommandOverride" Margin="5 0 0 0" />
                                            </DockPanel>
                                        </DataTemplate>
                                        <DataTemplate DataType="{x:Type primitives:BooleanNode}">
                                            <CheckBox IsChecked="{Binding Value}" MinWidth="100" Margin="5 0 0 0" />
                                        </DataTemplate>
                                        <DataTemplate DataType="{x:Type primitives:PasswordNode}">
                                            <PasswordBox PasswordChanged="PrimitiveInputPasswordBox_PasswordChanged" MinWidth="100" Margin="5 0 0 0" />
                                        </DataTemplate>
                                        <DataTemplate DataType="{x:Type primitives:TextNode}">
                                            <TextBox Text="{Binding Value}" AcceptsReturn="True" AcceptsTab="True" Width="100" Height="60" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Margin="5 2 0 2" TextAlignment="Left" VerticalContentAlignment="Top"/>
                                        </DataTemplate>
                                    </nodify:Node.Resources>
                                </nodify:Node>
                            </DataTemplate>
                            <DataTemplate DataType="{x:Type baseNodes:ProcessorNode}">
                                <nodify:Node Header="{Binding Title}" Input="{Binding Input}" Output="{Binding Output}" Content="{Binding}" ToolTip="{Binding Tooltip}" InputConnectorTemplate="{StaticResource PrimitiveNodeInputConnectorTemplate}" OutputConnectorTemplate="{StaticResource PrimitiveNodeOutputConnectorTemplate}">
                                    <nodify:Node.Resources>
                                        <SolidColorBrush Color="MediumPurple" x:Key="PreviewModeBorderColor"></SolidColorBrush>
                                        <Style TargetType="{x:Type nodify:Node}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsPreview}" Value="True">
                                                    <Setter Property="BorderBrush" Value="{StaticResource PreviewModeBorderColor}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>

                                        <DataTemplate DataType="{x:Type specialNodes:PreviewNode}">
                                            <DataTemplate.Resources>
                                                <Style TargetType="Label">
                                                    <Setter Property="Foreground" Value="White"></Setter>
                                                </Style>
                                            </DataTemplate.Resources>
                                            <DockPanel LastChildFill="True" MinWidth="400" MinHeight="200" MaxHeight="800">
                                                <!--Notice this user control has its data context set to itself, so we will lost data context from this point-->
                                                <local:PreviewSurface Loaded="PreviewSurface_Loaded" FileMenuVisibility="Collapsed"/>
                                            </DockPanel>
                                        </DataTemplate>
                                        <DataTemplate DataType="{x:Type advanced:GraphInputOutputNodeBase}">
                                            <DataTemplate.Resources>
                                                <Style TargetType="TextBox">
                                                    <Setter Property="VerticalAlignment" Value="Center"></Setter>
                                                </Style>
                                            </DataTemplate.Resources>
                                            <DockPanel LastChildFill="True">
                                                <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">
                                                    <Button Style="{StaticResource IconButton}" Content="{StaticResource PlusIcon}" Command="{Binding AddEntryCommand}" />
                                                    <Button Style="{StaticResource IconButton}" Content="{StaticResource RemoveKeyIcon}" Command="{Binding RemoveEntryCommand}" />
                                                </StackPanel>
                                                <ListView ItemsSource="{Binding Definitions}">
                                                    <ListView.ItemContainerStyle>
                                                        <Style TargetType="ListViewItem">
                                                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                                        </Style>
                                                    </ListView.ItemContainerStyle>
                                                    <ListView.ItemTemplate>
                                                        <DataTemplate DataType="{x:Type advanced:GraphInputOutputDefinition}">
                                                            <DockPanel LastChildFill="True" MinWidth="150">
                                                                <TextBox Text="{Binding Name}" PreviewKeyDown="PrimitiveInputTextbox_OnPreviewKeyDown_CommandOverride" ToolTip="Name of the parameter."></TextBox>
                                                                <ComboBox SelectedItem="{Binding ValueType, Converter={StaticResource GraphInputOutputComboDataTypeNameToTypeConverter}, UpdateSourceTrigger=PropertyChanged}" SelectedIndex="1" ToolTip="Type of the parameter.">
                                                                    <!-- Primitive -->
                                                                    <ComboBoxItem Content="Boolean"/>
                                                                    <ComboBoxItem Content="Number"/>
                                                                    <ComboBoxItem Content="String"/>
                                                                    <ComboBoxItem Content="DateTime"/>
                                                                    <!-- Basic (Internal) Types -->
                                                                    <ComboBoxItem Content="DataGrid"/>
                                                                    <ComboBoxItem Content="Vector"/>
                                                                </ComboBox>
                                                                <TextBox Text="{Binding ValueString}" PreviewKeyDown="PrimitiveInputTextbox_OnPreviewKeyDown_CommandOverride" MinWidth="35" ToolTip="Default value of the parameter."/>
                                                            </DockPanel>
                                                        </DataTemplate>
                                                    </ListView.ItemTemplate>
                                                </ListView>
                                            </DockPanel>
                                        </DataTemplate>

                                        <DataTemplate DataType="{x:Type specialNodes:Dictionary}">
                                            <DataTemplate.Resources>
                                                <Style TargetType="TextBox">
                                                    <Setter Property="VerticalAlignment" Value="Center"></Setter>
                                                </Style>
                                            </DataTemplate.Resources>
                                            <DockPanel LastChildFill="True">
                                                <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">
                                                    <Button Style="{StaticResource IconButton}" Content="{StaticResource PlusIcon}" Command="{Binding AddEntryCommand}" />
                                                    <Button Style="{StaticResource IconButton}" Content="{StaticResource RemoveKeyIcon}" Command="{Binding RemoveEntryCommand}" />
                                                </StackPanel>
                                                <ListView ItemsSource="{Binding Definitions}">
                                                    <ListView.ItemContainerStyle>
                                                        <Style TargetType="ListViewItem">
                                                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                                        </Style>
                                                    </ListView.ItemContainerStyle>
                                                    <ListView.ItemTemplate>
                                                        <DataTemplate DataType="{x:Type specialNodes:DictionaryEntryDefinition}">
                                                            <DockPanel LastChildFill="True" MinWidth="150">
                                                                <TextBox Text="{Binding Name}" PreviewKeyDown="PrimitiveInputTextbox_OnPreviewKeyDown_CommandOverride"></TextBox>
                                                                <ComboBox ItemsSource="{Binding Source={StaticResource DictionaryEntryTypeEntriesFromEnum}}" SelectedItem="{Binding Type}"></ComboBox>
                                                                <TextBox Text="{Binding Value}" PreviewKeyDown="PrimitiveInputTextbox_OnPreviewKeyDown_CommandOverride"></TextBox>
                                                            </DockPanel>
                                                        </DataTemplate>
                                                    </ListView.ItemTemplate>
                                                </ListView>
                                            </DockPanel>
                                        </DataTemplate>

                                        <DataTemplate DataType="{x:Type specialNodes:DataTable}">
                                            <DataTemplate.Resources>
                                                <Style TargetType="TextBox">
                                                    <Setter Property="VerticalAlignment" Value="Center"></Setter>
                                                </Style>
                                            </DataTemplate.Resources>
                                            <DockPanel LastChildFill="True">
                                                <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">
                                                    <Button Style="{StaticResource IconButton}"
                         Content="{StaticResource PlusIcon}"
                         Command="{Binding AddEntryCommand}" />
                                                    <Button Style="{StaticResource IconButton}"
                         Content="{StaticResource RemoveKeyIcon}"
                         Command="{Binding RemoveEntryCommand}" />
                                                </StackPanel>
                                                <ListView ItemsSource="{Binding Definitions}">
                                                    <ListView.ItemContainerStyle>
                                                        <Style TargetType="ListViewItem">
                                                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                                        </Style>
                                                    </ListView.ItemContainerStyle>
                                                    <ListView.ItemTemplate>
                                                        <DataTemplate DataType="{x:Type specialNodes:DataTableFieldDefinition}">
                                                            <DockPanel LastChildFill="True" MinWidth="150">
                                                                <TextBox Text="{Binding Name}" PreviewKeyDown="PrimitiveInputTextbox_OnPreviewKeyDown_CommandOverride"></TextBox>
                                                                <ComboBox ItemsSource="{Binding Source={StaticResource DictionaryEntryTypeEntriesFromEnum}}"
                                       SelectedItem="{Binding Type}"></ComboBox>
                                                            </DockPanel>
                                                        </DataTemplate>
                                                    </ListView.ItemTemplate>
                                                </ListView>
                                            </DockPanel>
                                        </DataTemplate>

                                        <DataTemplate DataType="{x:Type baseNodes:DynamicInputProcessorNode}">
                                            <DockPanel LastChildFill="True">
                                                <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">
                                                    <Button Style="{StaticResource IconButton}" Content="{StaticResource PlusIcon}" Command="{Binding AddEntryCommand}" />
                                                    <Button Style="{StaticResource IconButton}" Content="{StaticResource RemoveKeyIcon}" Command="{Binding RemoveEntryCommand}" />
                                                    <TextBlock Foreground="{Binding Message.Type, Converter={StaticResource NodeMessageTypeToBrushColorConverter}}" Margin="0" Padding="0" MaxWidth="256" TextWrapping="WrapWithOverflow" Text="{Binding Message.Content}" Visibility="{Binding Message.Type, Converter={converters:NodeMessageTypeToVisibilityConverter IncludeMinorMessage=False}}"/>
                                                </StackPanel>
                                            </DockPanel>
                                        </DataTemplate>

                                        <DataTemplate DataType="{x:Type baseNodes:ProcessorNode}">
                                            <TextBlock Foreground="{Binding Message.Type, Converter={StaticResource NodeMessageTypeToBrushColorConverter}}" Margin="0" Padding="0" MaxWidth="256" TextWrapping="WrapWithOverflow" Text="{Binding Message.Content}" Visibility="{Binding Message.Type, Converter={converters:NodeMessageTypeToVisibilityConverter IncludeMinorMessage=False}}"/>
                                        </DataTemplate>
                                    </nodify:Node.Resources>
                                    <nodify:Node.HeaderTemplate>
                                        <DataTemplate>
                                            <!--The data type here is just a string-->
                                            <DockPanel LastChildFill="True" HorizontalAlignment="Stretch">
                                                <StackPanel DockPanel.Dock="Right" Margin="0" Orientation="Horizontal" VerticalAlignment="Center">
                                                    <Border Margin="5, 0, 0, 0" Padding="0" Width="10" Height="10" CornerRadius="5" BorderThickness="2" BorderBrush="{StaticResource PreviewModeBorderColor}" MouseDown="ProcessorNodeTogglePreviewButton_MouseDown" Tag="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type nodify:Node},Mode=FindAncestor}}" DataContext="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type nodify:Node},Mode=FindAncestor}}">
                                                        <Border.Resources>
                                                            <Style TargetType="{x:Type Border}">
                                                                <Setter Property="Background" Value="Transparent"></Setter>
                                                                <Style.Triggers>
                                                                    <DataTrigger Binding="{Binding IsPreview}" Value="True">
                                                                        <Setter Property="Background" Value="{StaticResource PreviewModeBorderColor}"></Setter>
                                                                    </DataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Border.Resources>
                                                    </Border>
                                                    <Button Content="Run" Click="ProcessorNodePreviewButton_Click" Tag="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type nodify:Node},Mode=FindAncestor}}">
                                                        <Button.Resources>
                                                            <!--Custom Styling-->
                                                            <Style TargetType="{x:Type Button}">
                                                                <Setter Property="Background" Value="Transparent"/>
                                                                <Setter Property="BorderBrush" Value="#272727"/>
                                                                <Setter Property="Foreground" Value="DarkGray"/>
                                                                <Setter Property="Margin" Value="2, 0"/>
                                                                <Setter Property="Padding" Value="4, 2"/>
                                                                <Setter Property="VerticalAlignment" Value="Center"/>
                                                                <Setter Property="FontSize" Value="10"></Setter>
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="{x:Type Button}">
                                                                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
                                                                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                            </Border>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Style.Triggers>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Background" Value="ForestGreen"/>
                                                                        <Setter Property="Foreground" Value="White"/>
                                                                    </Trigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                            <Style TargetType="Border">
                                                                <Setter Property="CornerRadius" Value="4"/>
                                                            </Style>
                                                        </Button.Resources>
                                                    </Button>
                                                    <TextBlock Foreground="{Binding Message.Type, Converter={StaticResource NodeMessageTypeToBrushColorConverter}}" Margin="0" Padding="0" MaxWidth="256" TextAlignment="Left" VerticalAlignment="Bottom" FontSize="12" TextWrapping="WrapWithOverflow" Text="{Binding Message.Content}" DataContext="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type nodify:Node},Mode=FindAncestor}}" Visibility="{Binding Message.Type, Converter={converters:NodeMessageTypeToVisibilityConverter IncludeMinorMessage=True, MinorMessageOnly=True}}"/>
                                                </StackPanel>
                                                <Label Content="{Binding }" Foreground="White" Margin="0" Padding="0" VerticalAlignment="Center"/>
                                            </DockPanel>
                                        </DataTemplate>
                                    </nodify:Node.HeaderTemplate>
                                </nodify:Node>
                            </DataTemplate>
                            <DataTemplate DataType="{x:Type baseNodes:CommentNode}">
                                <!--At the moment there is an issue with resizing comment node when there is long comment - we can only make it bigger but not smaller-->
                                <nodify:GroupingNode Header="{Binding Title}" Content="{Binding Comment}" ActualSize="{Binding Size, Mode=TwoWay, Converter={StaticResource SizeToVector2DConverter}}" CanResize="True">
                                    <nodify:GroupingNode.ContentTemplate>
                                        <DataTemplate DataType="{x:Type baseNodes:CommentNode}">
                                            <TextBlock Text="{Binding}" TextWrapping="Wrap"/>
                                        </DataTemplate>
                                    </nodify:GroupingNode.ContentTemplate>
                                </nodify:GroupingNode>
                            </DataTemplate>
                            <DataTemplate DataType="{x:Type baseNodes:KnotNode}">
                                <nodify:KnotNode Content="{Binding Connector}"/>
                            </DataTemplate>
                            <!--Special Nodes-->
                            <DataTemplate DataType="{x:Type specialNodes:GraphStats}">
                                <nodify:Node Header="{Binding Title}" Content="{Binding}" Input="{Binding Input}" Output="{Binding Output}" InputConnectorTemplate="{StaticResource PrimitiveNodeInputConnectorTemplate}" OutputConnectorTemplate="{StaticResource PrimitiveNodeOutputConnectorTemplate}">
                                    <nodify:Node.ContentTemplate>
                                        <DataTemplate DataType="{x:Type specialNodes:GraphStats}">
                                            <DataTemplate.Resources>
                                                <Style TargetType="Label">
                                                    <Setter Property="Foreground" Value="White"></Setter>
                                                </Style>
                                            </DataTemplate.Resources>
                                            <DockPanel LastChildFill="True">
                                                <StackPanel Orientation="Horizontal">
                                                    <Label Content="Nodes: "></Label>
                                                    <Label Content="{Binding Graph.Nodes.Count}"></Label>
                                                    <Label Content="(Including comments and all nodes)"></Label>
                                                </StackPanel>
                                            </DockPanel>
                                        </DataTemplate>
                                    </nodify:Node.ContentTemplate>
                                </nodify:Node>
                            </DataTemplate>
                        </nodify:NodifyEditor.Resources>
                        <nodify:NodifyEditor.ConnectionTemplate>
                            <DataTemplate DataType="{x:Type viewModels:BaseConnection}">
                                <nodify:CircuitConnection Source="{Binding Input.Anchor, Converter={StaticResource NodeLocationConverter}}" Target="{Binding Output.Anchor, Converter={StaticResource NodeLocationConverter}}" SourceOffset="10 0" TargetOffset="20 0" SourceOffsetMode="Circle" TargetOffsetMode="Circle" Style="{StaticResource ConnectionStyle}"/>
                            </DataTemplate>
                        </nodify:NodifyEditor.ConnectionTemplate>
                        <nodify:NodifyEditor.ItemContainerStyle>
                            <Style TargetType="{x:Type nodify:ItemContainer}">
                                <Setter Property="Location" Value="{Binding Location, Converter={StaticResource NodeLocationConverter}}" />
                            </Style>
                        </nodify:NodifyEditor.ItemContainerStyle>
                    </nodify:NodifyEditor>
                    <TextBlock x:Name="InitialInstructionsTextBlock" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#868686" FontWeight="Bold" TextAlignment="Center" Visibility="{Binding Canvas.Nodes.Count, Converter={converters:BooleanToVisibilityConverter Negate=True}}" IsHitTestVisible="False">
                        <Run FontSize="23">Welcome to Parcel PV1 Neo!</Run>
                        <LineBreak/>
                        <Run FontSize="16" FontWeight="Normal">Right Click RMB or Press Tab to show Functions Tray</Run>
                        <LineBreak/>
                        <Run FontSize="16" FontWeight="Normal">Drag-and-drop from Node Palette to get Started</Run>
                    </TextBlock>
                </Grid>
            </Grid>
            <StackPanel Margin="4, 8" Orientation="Vertical"
                HorizontalAlignment="Right" VerticalAlignment="Bottom"
                Background="Transparent">
                <Label Margin="0" Padding="0" Foreground="#34A8A8A8" FontFamily="Arial" FontSize="16" FontWeight="Bold" Content="Beta Test" HorizontalAlignment="Center"/>
                <Label Margin="0" Padding="0" Foreground="#34A8A8A8" FontFamily="Arial" FontSize="8" FontStyle="Italic" Content="Autumn 2024" HorizontalAlignment="Center"/>
                <TextBlock Margin="0" Padding="0" Foreground="#44A8A8A8" FontFamily="Arial" FontSize="8" HorizontalAlignment="Right" TextAlignment="Center" TextWrapping="WrapWithOverflow" MaxWidth="160">
                    This version is not production ready.
                    <LineBreak/>
                    Interface may update, GUI may be adjusted, node behaviors may change.
                </TextBlock>
            </StackPanel>
        </Grid>
    </DockPanel>
</local:BaseWindow>
